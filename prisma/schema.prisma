
generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
      
model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String?
  username          String    @unique
  name              String?
  role              String    @default("user")
  isVerified        Boolean   @default(false)
  verificationToken String?
  otp               String?
  otpExpiry         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  appointments      Appointment[]
  payments          Payment[]
  healthData        HealthData?
  messages          Message[]
  notifications     Notification[]
}

model Appointment {
  id                Int       @id @default(autoincrement())
  slot              DateTime
  status            String    @default("pending")
  videoConferenceUrl String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  userId            Int
  user              User      @relation(fields: [userId], references: [id])

  payments          Payment[]
  notifications     Notification[]
}

model Payment {
  id                Int       @id @default(autoincrement())
  amount            Float
  paymentStatus     String
  paymentDate       DateTime  @default(now())
  billingDetails    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  userId            Int
  appointmentId     Int
  user              User      @relation(fields: [userId], references: [id])
  appointment       Appointment @relation(fields: [appointmentId], references: [id])
}

model HealthData {
  id                Int       @id @default(autoincrement())
  metrics           Json
  goals             Json
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  userId            Int       @unique
  user              User      @relation(fields: [userId], references: [id])
}

model Message {
  id                Int       @id @default(autoincrement())
  content           String
  attachments       Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  userId            Int
  user              User      @relation(fields: [userId], references: [id])
}

model Notification {
  id                Int       @id @default(autoincrement())
  type              String
  message           String
  isRead            Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  userId            Int
  appointmentId     Int?
  user              User      @relation(fields: [userId], references: [id])
  appointment       Appointment? @relation(fields: [appointmentId], references: [id])
}